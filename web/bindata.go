// Code generated by go-bindata.
// sources:
// .build/assets/about.css
// .build/assets/about.html
// .build/assets/close.svg
// .build/assets/edit.css
// .build/assets/edit.html
// .build/assets/edit.js
// .build/assets/index.js
// .build/assets/links.css
// .build/assets/links.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x41\x6e\xc3\x20\x10\x45\xf7\x3d\x05\x52\xb6\x25\x22\x71\x54\xb5\xe3\x33\xf4\x10\x63\x03\x36\x2a\x66\x10\x0c\xb5\x5d\xd4\xbb\x57\x56\xec\x46\x59\xb0\x60\xe6\xcd\xd3\xff\x1d\xe9\xb5\x76\xd8\x7f\x0d\x89\x4a\xd0\x70\xb2\xd6\xb6\x96\x02\x4b\x8b\x93\xf3\x2b\x7c\x52\xe0\x6c\x52\x42\x7e\x15\x19\x43\x96\xd9\x24\xb7\x23\xd9\xfd\x18\xb8\x5d\xe3\x72\xff\xce\xc6\x0d\x23\x43\xa3\xd4\xef\x19\x3b\x2a\x5c\x67\xa7\x79\x84\x77\xa5\xe2\xd2\x4e\x98\x06\x17\x40\x09\x2c\x4c\x3b\x20\xb0\xf6\xe4\x29\xc1\x49\x7d\xd8\x96\xcd\xc2\x52\x9b\x9e\x12\xb2\xa3\x00\x81\x82\xf9\x07\x61\xa4\x6f\x93\x2a\x45\xec\x1d\xaf\xa0\xce\x6f\xc7\xea\x6c\x8b\xf7\xb2\x24\x7f\xb8\xb4\xd6\x77\x57\x1e\x51\xd3\x0c\x97\xb8\x88\xed\x29\xb1\xb5\x3b\xce\x62\x7d\x74\xb8\xde\xe2\x72\xcc\xc7\xcb\xe1\x69\x9a\x66\x4f\x2d\x3b\x62\xa6\x09\x6e\xea\xc1\x15\x5f\x23\x6a\xed\xc2\x00\xaa\xf5\x2e\xb3\xcc\xbc\x7a\x23\x79\x8d\xe6\x29\x7a\xf1\xc2\xbb\xfa\x2c\xba\x6e\xa2\x97\xbf\x00\x00\x00\xff\xff\xbb\x32\x78\xd0\x7d\x01\x00\x00"

func aboutCssBytes() ([]byte, error) {
	return bindataRead(
		_aboutCss,
		"about.css",
	)
}

func aboutCss() (*asset, error) {
	bytes, err := aboutCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.css", size: 381, mode: os.FileMode(511), modTime: time.Unix(1704206315, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _aboutHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4f\x6f\xd4\x3e\x10\xbd\x57\xea\x77\x98\x5f\x2e\xfd\x21\x75\xe3\xad\xe0\x80\x16\x27\x08\x95\x3f\x42\x2a\x02\xa1\x72\xe0\x38\x6b\x4f\x62\x6b\x1d\x3b\xd8\x93\x6d\xf3\xed\x51\xe2\xdd\xb4\x5b\x0a\xbe\xc4\xf1\x4b\xde\x7b\xf3\xc6\x23\xff\x7b\xff\xf5\xfa\xf6\xe7\xb7\x0f\x60\xb8\x73\xf5\xf9\x99\x5c\x9e\x84\xba\x3e\x3f\x03\x00\x90\x6c\xd9\x51\xfd\x29\xc0\x66\x03\xef\xb6\x61\x60\x29\xf2\xd1\x01\xef\x88\x11\x0c\x73\xbf\xa2\x5f\x83\xdd\x57\xc5\x75\xf0\x4c\x9e\x57\xb7\x63\x4f\x05\xa8\xfc\x56\x15\x4c\xf7\x2c\x26\x81\x37\xa0\x0c\xc6\x44\x5c\x0d\xdc\xac\x5e\x17\xe2\xc8\xe4\xac\xdf\x81\x89\xd4\x54\x85\x48\x02\x27\xad\x52\xa5\x54\x64\x78\x5a\x91\x5c\x55\x24\x1e\x1d\x25\x43\xc4\xc5\x33\x7f\x4e\x4e\xd2\x46\x88\x26\x78\x4e\x65\x1b\x42\xeb\x08\x7b\x9b\x4a\x15\x3a\xa1\x52\x7a\xdb\x60\x67\xdd\x58\x7d\x99\x70\x8a\x11\x79\xf3\x6a\xbd\xbe\x7c\xb9\x5e\xff\x5b\x47\x8a\x43\x28\x72\x1b\xf4\x78\x14\xd6\x76\x0f\xca\x61\x4a\x55\x31\xfb\x3d\x3a\x9a\x41\x73\x35\xc5\x76\x63\xfd\x2e\x49\x61\xae\x1e\x43\x7d\x7d\x1b\x40\x45\x42\x26\x40\x98\xed\xf3\xd8\x13\xc8\xdd\x56\xd7\x6d\x10\x52\x4c\x1b\x40\xaf\x81\x0d\x79\x18\xc3\x10\xa1\x8f\xd4\x50\x24\x9d\xbf\x4f\x26\x44\x56\x03\x83\xc7\x8e\x4a\xf8\x18\x22\xd0\x3d\x76\xbd\xa3\xcb\x85\xa6\xb1\x1e\xbd\xa2\x95\xc6\x64\xb6\x01\xa3\xce\xbc\x25\x3c\x58\x99\xd6\xe7\x66\x52\xc9\xb4\x36\x01\xba\x48\xa8\x47\x60\xdc\x91\x5f\xf4\x2f\x9c\x83\x2d\x01\x0e\x1c\x3a\x64\xab\xd0\xb9\x11\x22\x69\x1b\x49\x31\x69\xe0\x30\x93\xdc\xd1\x36\x59\xa6\x72\x22\xb5\x7c\x91\xc0\x07\x7e\xc2\x04\x0a\x3d\xf4\x98\x98\xc0\xce\xa7\xf0\xe3\xfb\xcd\x13\x4b\x6c\x90\x67\x68\x2e\x73\x76\x76\x67\x9d\x5b\x04\x81\x43\x29\x45\xff\x47\xa6\x89\x72\xa0\x89\x21\x34\x80\xce\x2d\x95\x25\x68\xc3\x64\x52\xe2\xa3\x9b\xb2\x11\xa2\x0d\x62\x86\x8b\xfa\xb8\x93\x02\xeb\xe7\xb8\x95\x41\xdf\x52\x26\x0c\x0a\xd9\x06\x3f\x8b\x3c\xf2\x78\x90\x38\xc4\x4f\xda\xb2\x58\xc0\x43\x4f\xff\x8f\xd4\x3b\x54\xd6\xb7\x27\xb5\xb1\xc9\x4d\x46\xc5\x03\x3a\xd8\xa3\x1b\xe8\xc5\x93\xb6\x9e\x46\x74\xa2\xf2\x97\x4e\x5f\xc2\x9d\xb1\xca\xe4\xec\x1c\x71\x8e\xff\xa1\x8e\x29\xf8\xd3\xa8\xf3\x2d\x38\xc6\x9c\x4e\x73\x96\x42\xdb\xfd\x3c\x0c\x87\x21\x90\xf3\x44\xd7\xbf\x03\x00\x00\xff\xff\x53\xd8\x85\x79\x4a\x04\x00\x00"

func aboutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_aboutHtml,
		"about.html",
	)
}

func aboutHtml() (*asset, error) {
	bytes, err := aboutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.html", size: 1098, mode: os.FileMode(511), modTime: time.Unix(1704206315, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _closeSvg = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8e\xc1\x8a\x84\x30\x0c\x86\x5f\x25\xe4\xbe\x69\x9b\x62\xcd\x2e\xd6\xc3\x9e\xdd\x87\x58\x50\x5a\xc1\x19\x65\x2c\x56\xe6\xe9\x87\x56\x2f\x3f\xe1\xfb\xbf\x84\x74\xfb\x11\xe0\x7c\x2c\xcf\xdd\x63\x4c\x69\xfb\x51\x2a\xe7\x4c\xd9\xd2\xfa\x0a\x8a\xb5\xd6\x6a\x3f\x02\x42\x9e\xc7\x14\x3d\x5a\x87\x10\xa7\x39\xc4\x74\xcd\xc7\x3c\xe5\xdf\xf5\xf4\xa8\x41\x83\x75\x60\x1d\xf6\xdd\xf6\x9f\x22\x8c\x1e\xff\x58\xa8\x81\x6f\x72\x3c\xb0\x23\x2b\xd0\x52\x03\x46\xc0\x34\x24\x52\x79\x25\xed\x2d\xdd\xdc\x5c\x5e\xdd\x58\x98\x0c\x43\x89\xc1\x08\xb0\x26\xc3\x8b\x94\x4b\x35\x0a\xff\xaa\x65\x6d\xc0\xc8\x1b\x55\xdf\x95\x87\xfb\x4f\x00\x00\x00\xff\xff\xe5\x79\xbd\x91\xd8\x00\x00\x00"

func closeSvgBytes() ([]byte, error) {
	return bindataRead(
		_closeSvg,
		"close.svg",
	)
}

func closeSvg() (*asset, error) {
	bytes, err := closeSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "close.svg", size: 216, mode: os.FileMode(511), modTime: time.Unix(1704206315, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xdf\x6e\xe2\x3c\x10\xc5\xef\xbf\xa7\xb0\xca\x0d\x48\x38\x35\xb4\xd0\x0f\x5b\xda\x37\xd8\x07\xd8\x4b\xc7\x99\x24\x56\x1d\x8f\x65\x4f\x20\x6d\xc4\xbb\xaf\xf2\x07\x9a\xdd\x76\xb5\x5a\x45\xa0\x60\xff\xf0\xcc\x9c\x73\x9c\x63\xf1\xd6\xe7\xda\xbc\x56\x11\x5b\x5f\xc8\x55\x59\x96\xaa\x44\x4f\xbc\xd4\x8d\x75\x6f\xf2\x3b\x7a\x4a\x10\xa3\xa6\x2d\x4b\xda\x27\x9e\x20\xda\x19\x49\xf6\x1d\xe4\xf3\x3e\x74\xd3\xcf\x0b\xd8\xaa\x26\xf9\x24\xc4\xb5\xc4\xd8\xf4\x04\x1d\x71\xed\x6c\xe5\xa5\x01\x4f\x10\xaf\xab\x5c\xc7\xfe\x62\x0b\xaa\xe5\xf1\x30\xfc\xaf\xd1\xb1\xb2\x5e\x0a\xa6\x5b\x42\x15\x30\x59\xb2\xe8\x65\x04\xa7\xc9\x9e\xe1\xba\x6a\xa3\xeb\xff\xa9\x9d\xa7\x2f\xda\x51\x73\x49\x21\x42\xa7\x82\x2e\x0a\xeb\x2b\xb9\x3f\x84\x4e\x19\x74\x18\xe5\xea\x74\x3a\xa9\x1c\x63\x01\x91\x47\x5d\xd8\x36\xc9\xe7\xd0\xcd\x2b\x72\x17\x3a\x96\xd0\xd9\x82\xad\x8c\x31\x0a\x5b\x72\xd6\x83\xf4\xe8\x41\xe5\xd8\xf1\x54\xeb\x02\x2f\x52\xb0\x7d\xe8\xd8\x31\x74\x2c\x56\xb9\x5e\x8b\xed\xf8\x64\xfb\xcd\x38\x84\x2c\xd1\xb4\xa9\xff\x7c\xa4\x38\x95\x13\x20\xf9\x05\xf2\x57\x4b\xdc\xfa\xd0\x12\x0f\x4e\x1b\xa8\xd1\x15\x10\xfb\xb9\xcb\xa2\x28\x6e\x68\x83\xef\x7f\x24\x4c\x13\xfa\x5f\x86\x9c\xa6\x3f\x1c\xc5\x27\xc1\x17\x0e\x39\x28\x69\x21\xe3\x7e\x17\x3a\x45\x51\xfb\xd9\x91\xf1\x75\x70\x95\xed\x85\x68\x12\x03\x9d\x80\x5b\xcf\xb1\x25\x75\xdf\x93\xc9\x68\x07\x3f\xd6\x62\xf3\xb1\xc6\x31\xda\xa1\x22\x61\x60\x53\x0a\x6e\x4a\xe7\x48\x84\x0d\x1f\x0a\x7f\x56\xfd\xb6\x1b\x07\x0f\xff\x6a\xca\x38\x74\xe6\xac\x7f\x5d\x64\x99\xcf\xa2\x94\xc7\xe1\x99\x90\xb2\x35\x5f\x22\x00\x8b\x28\x8c\xe8\x37\x7d\x13\x55\x9c\xca\x49\xa8\x02\x0c\x46\x3d\xca\x31\x98\x3f\x61\x59\xed\x69\x21\xff\x44\xce\x91\x18\x9a\x1c\x3e\x82\x0d\xd7\x6a\xc1\x97\x0e\x35\xc9\x71\xb6\xeb\xca\xb8\xd4\xdf\x93\xaf\xf3\x84\xae\x25\x50\x84\x41\x0a\x35\x22\x52\xa8\x49\x0d\x79\x4f\xf2\xa8\xc4\xc7\x18\xb6\xd1\x15\xc8\x36\xba\xf5\xc3\x63\x7a\x34\x0e\x13\x64\xe9\x5c\x3d\x6c\x96\xd0\xbd\xc6\x64\xc3\xdd\x8d\x0f\x22\x42\x00\x4d\xd2\xe3\xfc\xb6\xdc\x9b\xee\xfa\xff\xa1\x63\xc3\x97\x32\x6d\x4c\x18\x65\x40\x3b\x1e\xb2\x48\x0a\x06\x6d\x2c\xbd\xcd\x39\x31\x6d\x6e\x0d\xcf\xe1\xdd\x42\x5c\x8b\xec\xe5\x65\xcb\xc4\x96\x89\x6c\xf7\x72\xd8\xb2\xdd\x46\xcd\xb4\x14\x6a\x3e\x8a\xc3\x19\x3c\xa5\x9b\xc2\x2e\x65\x67\x9b\xfa\x3b\x96\x3d\xfd\x0e\x5a\x5f\x43\xb4\x93\x8e\xb2\xc6\x33\xc4\x05\x7d\xbc\xfe\xf7\x33\x00\x00\xff\xff\x6b\x6e\x99\x83\xe2\x04\x00\x00"

func editCssBytes() ([]byte, error) {
	return bindataRead(
		_editCss,
		"edit.css",
	)
}

func editCss() (*asset, error) {
	bytes, err := editCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.css", size: 1250, mode: os.FileMode(511), modTime: time.Unix(1704206315, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xc1\x6e\xe3\x20\x10\xbd\x47\xca\x3f\xcc\x72\xde\x04\x4b\xbb\x87\x55\x16\xdc\x43\x1a\xf5\x54\xb5\x87\x5c\x7a\x24\x78\x1c\x68\xb1\xa1\x30\x8e\xea\xbf\xaf\xb0\x9d\xda\x91\x7a\x2a\x17\x66\xe6\x31\xef\x3d\x06\xc4\xaf\xfb\xa7\xfd\xf1\xe5\xf9\x00\x86\x1a\x57\xae\x57\x62\xda\x01\x84\x41\x55\x0d\x11\x80\x20\x4b\x0e\xcb\x07\x2f\xf8\x18\x4d\xe5\x06\x49\x81\x21\x0a\x1b\x7c\xef\xec\x45\xb2\xbd\x6f\x09\x5b\xda\x1c\xfb\x80\x0c\xf4\x98\x49\x46\xf8\x41\x3c\x33\xff\x07\x6d\x54\x4c\x48\xb2\xa3\x7a\xf3\x8f\xf1\x2b\x93\xb3\xed\x1b\x98\x88\xb5\x64\x3c\x71\xac\x2c\x6d\x75\x4a\x6c\x44\xf3\x8a\xe8\x24\x4b\xd4\x3b\x4c\x06\x91\x16\x08\xf5\x01\x27\x89\xdc\xf2\x0d\x63\x76\x98\x76\x9c\xd7\xbe\xa5\xb4\x3d\x7b\x7f\x76\xa8\x82\x4d\x5b\xed\x9b\xdc\x73\x57\xab\xc6\xba\x5e\x3e\x66\x1c\x63\x54\xb4\xfb\x5b\x14\xbf\xff\x14\xc5\x8f\x0d\x08\xfe\x35\x3e\x71\xf2\x55\x7f\x75\x55\xfb\xd8\x80\xea\xc8\x6b\xdf\x04\x87\x84\x92\xf9\xba\xbe\x9a\x06\x10\x95\xbd\x80\xad\x24\x3b\xa9\x38\x57\x17\x75\xed\x12\x2b\x05\xaf\xec\x65\x89\xda\x36\x74\xb4\x30\xc2\x86\xb3\x5d\x74\x0c\x82\x53\x1a\x8d\x77\x15\x46\xc9\x0e\x2d\x61\x04\x32\x08\x5d\x74\x40\x1e\x92\xf1\x91\xb0\xcd\x94\x03\xc7\x6c\xe4\x46\x62\x96\x6f\xc2\xad\xbc\xe0\xf9\x4a\xe5\x7a\x35\xa5\x49\x47\x1b\x08\x52\xd4\xf3\x4b\xbe\x0e\x96\x47\x64\x9a\xce\x34\x13\xc1\xa7\xff\xf6\x19\x00\x00\xff\xff\xeb\xfa\x8e\xf8\x89\x02\x00\x00"

func editHtmlBytes() ([]byte, error) {
	return bindataRead(
		_editHtml,
		"edit.html",
	)
}

func editHtml() (*asset, error) {
	bytes, err := editHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.html", size: 649, mode: os.FileMode(511), modTime: time.Unix(1704206315, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x6f\x6f\xdb\xbc\x11\x7f\x9f\x4f\x91\x70\x40\x40\x22\x0c\x9d\xf4\x79\xf3\x20\x9a\x50\xa4\xa9\xb7\x62\x68\x97\x22\xc9\x8b\x0d\x5d\x31\xd0\xe4\x49\xe2\x4c\x91\x34\x49\x25\xf6\x1c\x7d\xf7\x81\x92\x6c\xcb\x89\xdb\x74\xcf\x0b\xdb\xbc\xe3\xf1\x77\x7f\xf8\xbb\xa3\x1f\xb9\x3f\x96\xb6\xce\x70\xd1\x18\x11\x95\x35\xb8\x22\xeb\x8a\x2d\xf2\xad\x5c\x90\xb5\x87\xd8\x78\x73\x2c\xad\x68\x6a\x30\x91\x2d\x1a\xf0\xab\x7b\xd0\x20\xa2\xf5\xb8\x20\x6d\x56\xb1\x05\xff\xf5\x23\xd7\x5a\x0f\xa7\xc4\x4f\x0f\x09\x0f\x3c\xc2\x54\x43\x92\x36\x27\x42\x18\x9d\xa1\x33\xca\xc9\xba\x60\x21\xae\x34\xb0\x00\xf1\xab\xb7\x0e\x7c\x5c\xe1\x19\xe5\x14\x21\xd2\xb6\x04\x4b\x5b\x3f\x3f\xe7\xeb\x96\x64\x29\xdb\x65\xe5\xb3\xa3\xbd\x74\x93\xb6\xd8\x81\x92\xf5\x66\x79\x3c\xc3\xbc\xdf\xae\xf3\x58\xa9\x90\xa5\x2f\xb6\xac\x7c\xce\xfb\xa5\xb4\x06\xfe\x62\x42\xfe\xed\x7b\x2f\x83\xf7\xd6\x0f\x0a\xce\xac\xd1\x96\xcb\x31\x70\x82\x32\x39\x67\x1e\x82\xb3\x26\xc0\x03\x2c\x23\x5d\xe4\x9c\x85\xc8\x63\x13\xb2\x7a\x83\xc8\x0a\xeb\xa7\x5c\x54\xbb\x38\x1d\x59\x3b\x6c\xe8\x82\xb4\xa4\xed\xb0\x3b\x5f\x63\xf0\x7a\xeb\xfe\xf5\x69\xb3\x2d\xae\xc1\x09\xa1\x9d\x31\xe7\x6d\xb4\x71\xe5\x80\x59\xf3\xd1\x1a\xd8\x41\x71\xb2\x1e\x67\xc7\x5c\x13\x2a\xcc\x49\x36\x20\xa4\xbd\x36\xdb\x07\x98\xee\x07\xb3\x41\xd8\x06\xf4\x26\xc4\x93\x8a\xd5\x27\xe0\x12\xc6\x28\xb4\x1e\x70\x96\x95\x4f\x97\x7b\x07\x8b\x06\x42\xec\xed\xba\xed\x1f\x03\x06\x30\xf2\x6f\xf7\xb7\x7f\x7f\x1d\xd4\xce\x15\x46\x37\xd6\x44\x30\xf1\xfc\x61\xe5\x00\xd1\x23\xc4\x9d\xd3\x4a\xf0\x64\x3f\xf9\x4f\xb0\x26\x13\x15\xf7\x01\x62\xde\xc4\xe2\x77\x44\xb2\x51\x34\x46\xe2\x84\xcf\x42\xf4\xca\x94\xaa\x58\x61\x4e\xde\x88\xe7\x75\x2c\x5b\xa8\x97\xb5\x19\x84\x59\x8b\x49\x56\xb1\x3b\x58\xe4\x45\x22\x7f\xd7\x10\x3b\x98\x8e\xfd\x3d\x3f\x0d\x3c\x1d\xff\xe3\xcb\xe7\x4f\x31\xba\xa1\x4c\x59\xcd\xac\x83\xce\x88\x9e\x5c\x6c\xf1\x93\x61\x81\xeb\xae\x99\x4a\x88\x23\xb0\x2d\x47\x36\x8e\x30\xfa\xeb\xf4\x01\xd1\x59\x67\xeb\x6c\x78\xc3\xf8\xeb\xed\x7d\x6f\xdd\x12\xbc\xac\xfc\xa8\xe7\x4a\xfb\x56\xcb\x25\x85\xc8\x5d\x8a\xe8\x83\x6d\x8c\x54\xa6\xbc\xd1\x0a\x4c\xbc\x03\x11\x31\xc9\xa4\xad\x53\xeb\x63\x47\x51\xcd\x7d\xa9\xcc\x79\xb4\x0e\xd1\x27\x65\xa4\x7d\x62\xca\x18\xf0\x9f\x40\x95\x55\x9c\xfc\x76\x2e\x58\xd5\x2f\xdf\x9d\x21\xb7\x44\xa4\xa5\xb3\xd7\xae\xb0\x66\x8f\x5c\x37\xf0\xfc\x8c\x10\x61\xd1\xab\x1a\x93\x4c\x9c\xe4\xf1\xf4\x14\xc7\x5c\x50\x83\x09\x15\xef\x3d\x13\x9a\x87\xf0\x59\x85\xc8\xb8\x94\x18\x3d\xaa\x80\xc8\xd5\x58\xed\xa1\xb6\x8f\x30\xec\x90\x96\x8e\xe6\xa0\x20\x6b\xc1\x9c\x87\x47\x30\xf1\x23\x14\xbc\xd1\x29\x15\x91\x6b\xdb\x53\x8c\x39\x1e\x2b\xc3\x6b\x60\xa1\x99\xf5\x3c\xc2\x97\x84\x05\xa7\x55\xc4\x68\x82\xc8\xb7\xcb\xef\x7d\xfd\x0e\x87\x9b\xd8\x93\xae\x05\xa3\x09\x77\x6a\xd2\x78\x3d\x41\x67\x82\x6c\xb9\x8f\xd7\x8d\xd7\x57\x65\x4b\x86\x16\xdf\x5d\x81\xa4\x40\xd6\x32\xef\x08\xec\x12\xc3\xb1\x24\x99\x2a\xb0\x64\x76\x4e\x54\x81\x21\x97\xcc\xdb\x26\x42\x5f\xae\x26\x07\x96\xe2\x4c\xde\x33\x99\x03\x0b\xb6\xf1\x02\xfe\x5d\xd9\x10\x3b\x1d\xb0\xc6\xeb\xd3\x53\x5c\xa9\x10\xad\x5f\x31\x0f\x4e\x73\x01\xf7\x31\x11\x63\xdd\xd2\x23\xd3\x68\x4d\xd1\x04\xa4\x8a\x13\x74\xd6\x10\x0a\x39\x4a\x8b\xf4\x8b\x4e\x72\xf9\x5e\x9e\xc1\xd5\xb6\x2e\xd6\xab\x52\x99\x33\xa0\x73\x16\x61\x19\x87\x2e\xcd\x11\xa2\xf3\x03\x95\x2f\x1a\x31\x47\x64\x6f\xab\xbb\x2b\xad\x4c\xd2\xcb\xbc\x23\x0f\x46\x3c\x09\x69\x8e\x5c\xc7\xe8\xd5\xac\x49\x9c\xad\x3c\x14\x88\x42\xda\x18\x7b\x4a\x9e\xb9\x73\x60\xe4\x4d\xa5\xb4\xc4\x32\x05\x3c\xc0\x04\xc7\x0d\x22\x14\x5e\xba\xab\x4c\xec\xd4\x63\x9c\x8b\x3f\xe7\x86\x3f\xaa\x92\x47\xeb\x59\x13\xc0\x5f\x97\xe9\x61\x53\x46\xc2\xf2\xb6\xc0\xe8\x0b\x17\xca\x44\x1b\x2a\x44\xde\xa3\x7f\x35\xef\x7e\xbb\xfc\xfd\xfc\x06\x5d\xa1\x9b\xe8\xf5\xf9\x0d\x7a\x11\x45\x0a\x73\xe8\x83\x39\x45\xd1\x73\x13\x0a\xeb\x6b\x44\x51\x10\x5c\xc3\x3f\xf1\x25\x41\x84\x96\x10\xfb\x87\xb6\xa3\x7b\xca\xf7\x03\x0f\x70\x6d\xe4\x74\x99\x62\xc2\x92\x5e\x50\x49\x2f\x09\x69\x41\x07\x48\x0f\x42\xd6\x2d\x16\x58\xf6\x03\x3b\x3d\x10\xb4\x7e\xdd\x32\xff\x17\x6d\x77\x84\x3d\x1a\x31\x76\x50\xe6\x08\x65\x33\xdc\x31\x4e\x90\xc4\xe2\xcd\x08\xf9\x38\xfd\x3c\x7d\x98\x22\x7a\x80\xd0\xf8\x35\x8b\x4b\x2a\xc9\xba\x1c\xb3\xb8\x24\x59\xc9\xec\xfc\xf9\x79\x81\xcb\x51\x32\x66\x9c\xcc\xcf\x4b\x78\x41\xd2\xc0\x58\xec\x35\xf1\x4b\x16\x66\x87\x58\xd8\xb3\x2d\x7b\xc5\xc2\x9e\x9d\x43\x1b\xef\x51\x28\x2b\xf7\x71\xa7\x77\x77\xb7\x77\x57\xc7\xe8\x4c\x64\xfb\xf7\x5e\xee\xe6\xdf\x8f\xef\xbd\xa5\xae\x83\x5f\x60\xd4\x6d\x12\x3a\xdf\xc8\x7f\x12\xb5\x43\x84\xfa\x9d\xac\x03\x22\x54\x6f\xe5\xc6\x6b\x44\x68\x1c\xfd\x0b\x24\xeb\x02\x93\x6c\x18\xaf\x5c\xca\x69\x9a\x61\x29\x29\x30\xe9\xdd\xf4\x10\xd4\x7f\x01\xd1\x82\x9e\x5c\x92\xcc\x1d\xb0\x08\xcd\xac\x56\x11\xd1\x23\xde\x99\xe8\x03\x26\x73\x58\x35\x0e\xd1\xd9\x0f\x0d\x1c\x0f\x11\x7e\x66\x20\x2a\x6e\xca\xad\x85\x3f\x64\xa1\x95\x98\x23\x5a\x77\x06\x7f\x80\xc6\x5b\x86\x96\x70\x70\xcc\xfe\x2a\x2b\xdf\x5d\x5c\xe4\xb9\x3c\x3d\xdd\xb4\x45\x5e\xf6\xf3\x35\xcd\xcd\x34\x41\xa9\x66\x85\x15\x4d\xc0\x84\xce\x30\x21\xed\xd0\x93\x5b\x6d\x4b\xba\x4f\x69\x87\x57\xf5\xe8\x7f\x01\x00\x00\xff\xff\xf0\x90\xb4\x5b\xb9\x0b\x00\x00"

func editJsBytes() ([]byte, error) {
	return bindataRead(
		_editJs,
		"edit.js",
	)
}

func editJs() (*asset, error) {
	bytes, err := editJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.js", size: 3001, mode: os.FileMode(511), modTime: time.Unix(1704206318, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdb\x6e\xdb\x46\x13\xbe\x37\xe0\x77\x98\xe0\x37\xb2\x4b\x84\x5e\xc9\xf9\xef\x6c\xa8\x45\xa2\xb8\xe8\x21\xad\x0b\xdb\xbd\x28\x8a\xa2\xd8\x90\x43\x69\xa3\xe5\x2e\xb1\x07\xcb\xaa\xa3\x37\xe8\x03\xf4\xf9\xfa\x24\xc5\x1e\x48\x51\x3e\xa5\x40\x6f\xea\x0b\x8b\x3b\xfc\x76\x66\xbe\x39\x92\x36\x5e\x55\x4e\x68\x45\x0b\xb8\x3b\x3c\x38\x3c\xb8\xe1\x06\x8e\x1a\xd3\xc2\x0c\x8e\x28\x69\xb4\x69\x49\x51\x1e\x1e\x00\x00\x1c\x55\x6d\x97\xc4\xff\xab\xda\x6e\x24\x96\xb6\x17\x4b\xbb\x13\x7b\x23\xb3\xd8\x1b\x39\x88\x2b\xdd\x6d\xbe\xc3\x0d\xcc\x40\xf1\x1b\xb1\xe0\x4e\x1b\xe6\x2d\x9a\x37\x0b\x54\x8e\x09\x55\xe3\xed\x45\x43\xc9\xf7\xbc\x12\xca\x69\xbb\x24\x05\x7c\x31\x83\x29\x7c\x09\xe4\xaf\x3f\xfe\x3c\x9e\x13\x38\x05\x32\x77\x46\x1e\xcf\x49\x56\x29\xb9\x75\x3f\x19\x79\x36\xb8\x8f\x30\x83\x81\x97\xe2\x2d\x46\x6e\x00\x06\x9d\x37\x0a\x8e\x68\xad\x2b\xdf\x06\x7b\x95\x41\xee\xf0\x5c\x62\x38\x25\x68\x71\x76\x78\xb0\x1d\x74\x19\xb4\xe2\xf7\x3d\x7d\x59\x57\x7a\x59\xb9\x40\xb1\x31\x2d\x5b\xa0\xa3\xd3\x22\xfc\xbc\xd5\x5e\xd5\x42\x2d\xe6\x52\xa0\x72\x97\x58\x39\x1a\x74\x42\xc2\x55\xd6\x52\xd2\x72\xb3\x10\xea\xd8\xe9\x8e\x94\xb0\x16\xaa\xd6\x6b\x26\x94\x42\xf3\x35\x8a\xc5\xd2\x4d\xfe\x0f\xc7\x51\x39\x5b\xa6\xf3\xeb\x7d\xa7\x82\x9f\x5f\x19\xdd\x8e\xdd\xf2\x46\x8c\x3c\xeb\xb8\x71\x21\x29\xde\x08\x66\xfd\x07\xeb\x8c\x50\x0b\x7a\x52\x30\xdb\x49\xe1\x28\x99\x90\xe4\x52\x8e\x48\x84\xff\x72\xf2\xeb\x9e\x15\xa9\x79\xfd\x04\xf1\xe0\x40\xcc\x60\xf2\x83\x4a\x5d\xf1\x80\x61\x1d\x77\xcb\x18\xc5\x44\x98\xf1\x8f\xfc\x96\xde\xa5\x34\x79\x23\x4f\x81\x4c\x78\x27\x26\xde\xc8\x09\x81\x57\x51\x41\x4e\x62\xcd\x1d\xbf\xde\x74\x78\x0a\xe4\xa3\xd5\x8a\x04\xe9\xb6\x60\x5c\xae\xf9\xc6\xee\xaa\x34\xc0\xb2\x23\x00\xa2\x01\xfa\x22\x48\x98\x5e\x0d\x42\x00\xbb\xd4\xeb\x73\x63\xb4\x89\x68\x86\xe1\x31\x39\x14\xfe\x12\xe5\x7c\xdc\x06\xb2\xe1\x21\xa6\x53\x7b\x17\x68\xc5\x5b\xf1\x50\xf6\x97\xa2\xf7\x30\xcb\x90\x97\x2f\xd3\x03\x0b\xc2\x4f\x9f\x80\x90\xb3\x5d\xcd\xb3\x1b\x2e\xa9\x37\xb2\x60\x8d\xae\xbc\xa5\xbd\x65\x6f\xe4\x3b\x51\xcf\x97\x5c\x2d\x30\x0b\xb7\x31\xad\x7d\xbc\x83\xdb\xef\x85\x5a\xdd\x2f\xde\x12\xac\xa9\x46\xc1\x97\x11\x42\x86\x00\x9e\x25\x0e\x21\x18\xd6\x54\xf0\x62\x06\x84\x0c\xd1\x48\xe0\x20\x7f\x15\x9e\x93\x59\x40\x69\x71\x1f\x31\x64\x50\x1b\xb1\x10\x6a\x8c\x4e\xea\x43\xf3\x33\x87\xb7\x8e\x12\x52\xa4\x9b\xcc\x60\xab\x6f\x70\x2e\x79\xa8\xe9\xc6\x57\xab\xe1\x0d\xaf\xeb\x2c\x96\x42\xad\x62\xb1\xf5\xee\xf3\x38\x14\x9e\xe8\x40\xc2\x49\x31\xe8\x70\xce\x50\xb2\x34\xd8\x90\x32\x78\xd3\xcb\xa3\x13\xa3\x33\xef\x3a\x54\xf5\xb5\xa6\xc1\xc5\xb1\xa5\xe5\xb3\x96\x6c\xc7\xd5\xc8\xd8\xe0\xf0\x52\x39\xb2\x67\x2a\x4f\xac\x67\xcd\xc5\xe8\xc4\xd6\x76\x86\x2b\x1b\xc7\x66\x09\xc4\x56\x5c\xe2\xcf\xf4\xa4\x18\x22\xb0\x40\x77\x85\x12\x73\x47\x31\x8b\xee\x2d\xb7\xf8\x46\xd5\xe7\xb7\x2e\xb8\xc5\xf3\x20\x29\x61\x5a\xc2\xee\x70\xb2\x3f\x00\x86\x0a\x1f\xd7\x4a\x8b\xd6\xf2\x45\x3f\xeb\x3e\x9b\xaf\x94\x98\x07\xf4\x53\x1a\x7b\x5a\xd8\xc7\x29\xab\x3a\xbf\xbc\xbc\xb8\x3c\x85\x50\x7a\xbd\xb9\x7f\x1d\x96\x1d\xad\xa5\xa8\xf1\x9d\xe1\x6b\x34\x8f\xcc\x9d\xe7\x75\x4d\xef\xeb\x1a\xb7\xdb\x13\x53\x2c\x2f\xa8\xbe\x67\x0b\xe6\x8c\x68\x73\x6b\x86\x6e\x8a\xef\x67\xfd\x7a\x19\x5a\x6a\x34\x40\x72\x6f\x64\x44\x9c\xb7\x32\x53\xdf\x71\xd9\xd7\x38\xa8\x09\x6b\x93\x35\xbc\xc6\x6f\x14\x7d\x3d\x9d\x16\x8f\xb4\xe6\x00\xb9\xf0\x6e\x84\xe9\x69\xc6\x7d\xa2\x15\x25\xd6\x7f\x68\x85\x23\xe5\x8e\x65\x5f\x05\xc8\x3a\x83\x37\xa8\xdc\x3b\x6c\xb8\x97\xfd\x26\xfa\x67\x33\x7c\x98\x7e\x4f\x07\xea\xe1\x94\x77\x69\x86\xff\x78\x71\x75\xdd\xef\xe7\x70\xfd\x33\x93\x1f\x4e\xe1\xdb\xab\x8b\x1f\x58\x5a\x54\xa2\xd9\xd0\xbb\x7c\x2d\xfc\xdf\x16\xf7\x96\x04\xfc\xa7\xb6\xc4\xd9\xc8\x4e\x14\x8c\xac\x3c\x28\x83\xe7\x95\x8f\xb6\xcc\x6e\xb9\x8c\xb6\x50\x4e\x5a\x02\xc4\xc3\x78\xfd\x44\x5a\xa6\x1a\x00\x56\x7b\x53\xe1\x6f\x4b\x6d\xdd\x1e\xee\x7e\x29\x06\x37\xad\xd3\x66\xc3\x0c\x76\x92\x57\x78\xe5\xb8\x43\x7a\xb7\x2d\x41\x79\x29\x4b\x20\x13\xac\x85\x1b\x12\xb7\x63\xd2\xef\xac\xd1\xa2\xda\xd1\xea\x17\x5c\x2a\x94\x58\x3e\xa1\x5a\x57\xb8\xa9\xf5\x5a\x91\x72\xaf\x47\xfb\x39\x12\x10\x1d\xb7\x0e\x9f\x79\x5f\x45\xc9\x7d\x40\xb2\x12\x5a\x26\x62\xa4\xa8\x56\x8f\xb5\xc4\x50\xc6\x84\x8c\x3e\xcb\x52\x0b\xe5\x1c\x3d\x58\xd5\x99\x42\xfe\x52\xe3\x75\x7d\x1e\x7a\xea\xbd\xb0\x0e\x15\x1a\x4a\xd2\x57\x22\x29\xf3\xe7\x62\x40\xa7\xa7\x78\xfb\x81\xba\xf0\x65\x95\xdb\x67\x5b\xc4\x87\xbf\x03\x00\x00\xff\xff\xcb\x35\x02\x97\x87\x0b\x00\x00"

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2951, mode: os.FileMode(511), modTime: time.Unix(1704206318, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _linksCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x51\x4e\xc4\x20\x10\x40\xff\x3d\x05\xc9\xfe\xca\x86\xdd\x6e\x8c\x4e\xcf\xe0\x21\x68\x81\x76\xb2\x94\x21\x30\xd8\x56\xe2\xdd\x4d\xb5\x35\xee\x07\x1f\x64\xde\xbc\xbc\xe9\xc8\xac\xb5\xd3\xfd\x7d\x48\x54\x82\x81\x93\x73\xae\x75\x14\x58\x3a\x3d\xa1\x5f\xe1\x9d\x02\x67\x9b\x92\xe6\x67\x91\x75\xc8\x32\xdb\x84\x3b\x92\xf1\xd3\xc2\xed\x1a\x97\xdf\xef\x6c\x71\x18\x19\x1a\xa5\xbe\xce\x1e\xc3\x3d\xd7\x19\x0d\x8f\xf0\xaa\x54\x5c\xda\x49\xa7\x01\x03\x28\xa1\x0b\xd3\x0e\x08\x5d\x7b\xf2\x94\xe0\xa4\xde\x5c\xcb\x76\x61\x69\x6c\x4f\x49\x33\x52\x80\x40\xc1\xfe\x81\x30\xd2\x87\x4d\x95\xa2\xee\x91\x57\x50\xe7\x97\x63\x74\x76\xc5\x7b\x59\x92\x3f\x5c\xc6\x98\x7f\x7d\xd7\xad\xef\x47\x9d\x47\x6d\x68\x86\x4b\x5c\xc4\xf6\x94\xd8\x8e\x3d\x2c\xe3\xe5\x58\x6f\x9a\x66\x8f\x95\x1d\x31\xd3\x04\x37\x15\x97\x83\x2b\xbe\x46\x6d\x0c\x86\x01\x54\xeb\x31\xb3\xcc\xbc\x7a\x2b\x79\x8d\xf6\xa1\xb8\x78\xe1\xb1\x3e\x8a\xae\x9b\xe8\xe9\x3b\x00\x00\xff\xff\x37\x15\xfa\xf5\x74\x01\x00\x00"

func linksCssBytes() ([]byte, error) {
	return bindataRead(
		_linksCss,
		"links.css",
	)
}

func linksCss() (*asset, error) {
	bytes, err := linksCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "links.css", size: 372, mode: os.FileMode(511), modTime: time.Unix(1704214932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _linksHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcf\x6b\xd5\x40\x10\xc7\xef\x85\xfe\x0f\xe3\xd2\x63\x5f\xe6\x15\x3d\x48\xdc\x8d\x48\x15\x2f\x15\x45\xea\xc1\xe3\x36\x99\x24\x4b\x36\xd9\xe7\xee\x24\x18\x42\xfe\x77\xd9\xfc\x28\xed\x53\x84\xee\x25\xcc\x7c\xe7\xc7\x77\x3e\x44\xbe\xfa\xf8\xf5\xf6\xfe\xe7\xb7\x4f\x50\x73\x6b\xb3\xcb\x0b\xf9\xf8\x25\x5d\x64\x97\x17\x00\x00\x92\x0d\x5b\xca\x3e\x3b\x48\x53\xf8\x90\xb3\x19\x08\xee\x4c\xd7\x04\x89\xab\xb2\x95\xb5\xc4\x1a\x6a\xe6\xd3\x81\x7e\xf5\x66\x50\xe2\xd6\x75\x4c\x1d\x1f\xee\xc7\x13\x09\xc8\xd7\x48\x09\xa6\xdf\x8c\x71\xcf\x3b\xc8\x6b\xed\x03\xb1\xea\xb9\x3c\xbc\x15\xb8\x4f\xb2\xa6\x6b\xa0\xf6\x54\x2a\x81\x01\x63\x14\x92\x3c\x04\xb1\xca\xf1\x79\xb2\x4a\x04\x1e\x2d\x85\x9a\x88\xc5\x3f\x3a\xa3\x93\x90\x22\x96\xae\xe3\x90\x54\xce\x55\x96\xf4\xc9\x84\x24\x77\x2d\xe6\x21\xbc\x2f\x75\x6b\xec\xa8\xbe\x44\x9d\xbc\xd7\x9c\xbe\x39\x1e\xaf\x5f\x1f\x8f\xff\xdf\x23\x71\x63\x23\x1f\x5c\x31\xee\x8b\x0b\x33\x40\x6e\x75\x08\x4a\x2c\x7e\x77\x47\x8b\x58\xdf\x64\x1b\x37\xbb\x72\xab\x6f\x9e\xca\xbd\x7d\x12\xc5\x37\x4d\xe0\x75\x57\x11\x5c\x35\x34\x5e\xc3\x95\x77\x3d\x13\xa4\x0a\x12\x98\xe7\xe7\xa5\xd2\x9a\xb3\xe6\x25\xab\x37\x08\xd3\xb4\x75\x27\x3f\xbe\xdf\xc1\x3c\x8b\xac\x72\x18\x93\x0d\x8d\x30\xcf\x12\x75\x26\x1f\x3c\xe0\x8b\x66\xec\x87\x96\xbd\xb5\x87\xde\x5b\x91\x9d\x97\xc4\xb9\x67\x3e\xf1\x2f\xa3\xd3\x04\xd4\x15\xcf\x2e\x92\xf8\xc8\x42\x62\x61\x86\x05\xf7\x86\x59\xe2\xf6\x6f\xfe\x09\x00\x00\xff\xff\xb1\xa0\xbc\x52\xb5\x02\x00\x00"

func linksHtmlBytes() ([]byte, error) {
	return bindataRead(
		_linksHtml,
		"links.html",
	)
}

func linksHtml() (*asset, error) {
	bytes, err := linksHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "links.html", size: 693, mode: os.FileMode(511), modTime: time.Unix(1704206318, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.css": aboutCss,
	"about.html": aboutHtml,
	"close.svg": closeSvg,
	"edit.css": editCss,
	"edit.html": editHtml,
	"edit.js": editJs,
	"index.js": indexJs,
	"links.css": linksCss,
	"links.html": linksHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"about.css": &bintree{aboutCss, map[string]*bintree{}},
	"about.html": &bintree{aboutHtml, map[string]*bintree{}},
	"close.svg": &bintree{closeSvg, map[string]*bintree{}},
	"edit.css": &bintree{editCss, map[string]*bintree{}},
	"edit.html": &bintree{editHtml, map[string]*bintree{}},
	"edit.js": &bintree{editJs, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
	"links.css": &bintree{linksCss, map[string]*bintree{}},
	"links.html": &bintree{linksHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

